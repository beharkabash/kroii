'use client';

import { useState, useEffect } from 'react';
import { Car, Plus, Edit, Trash2, Save, X, Lock, Upload, Image as ImageIcon } from 'lucide-react';
import { cars as initialCars, type Car as CarType } from '../data/cars';

export default function AdminPage() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [password, setPassword] = useState('');
  const [cars, setCars] = useState<CarType[]>([]);
  const [editingCar, setEditingCar] = useState<CarType | null>(null);
  const [isAddingNew, setIsAddingNew] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [loading, setLoading] = useState(true);

  // Simple password (in production, use proper auth)
  const ADMIN_PASSWORD = 'kroiadmin2025';

  // Load cars from API on mount
  useEffect(() => {
    if (isAuthenticated) {
      loadCars();
    }
  }, [isAuthenticated]);

  const loadCars = async () => {
    try {
      const response = await fetch('/api/cars');
      const data = await response.json();
      
      if (data.success) {
        // If dynamic data exists, use it; otherwise use initial static data
        setCars(data.cars.length > 0 ? data.cars : initialCars);
      }
    } catch (error) {
      console.error('Error loading cars:', error);
      setCars(initialCars);
    } finally {
      setLoading(false);
    }
  };

  const saveCarsToAPI = async (updatedCars: CarType[]) => {
    try {
      const response = await fetch('/api/cars', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ cars: updatedCars }),
      });

      const data = await response.json();
      if (!data.success) {
        throw new Error('Failed to save');
      }
      
      return true;
    } catch (error) {
      console.error('Error saving cars:', error);
      alert('‚ùå Tallennus ep√§onnistui. Yrit√§ uudelleen.');
      return false;
    }
  };

  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault();
    if (password === ADMIN_PASSWORD) {
      setIsAuthenticated(true);
      localStorage.setItem('adminAuth', 'true');
    } else {
      alert('V√§√§r√§ salasana');
    }
  };

  useEffect(() => {
    if (localStorage.getItem('adminAuth') === 'true') {
      setIsAuthenticated(true);
    }
  }, []);

  const handleLogout = () => {
    setIsAuthenticated(false);
    localStorage.removeItem('adminAuth');
  };

  const handleAddNew = () => {
    const newCar: CarType = {
      id: `new-${Date.now()}`,
      slug: '',
      name: '',
      brand: '',
      model: '',
      price: '‚Ç¨0',
      priceEur: 0,
      year: new Date().getFullYear().toString(),
      fuel: 'Diesel',
      transmission: 'Automatic',
      km: '0 km',
      kmNumber: 0,
      image: '/cars/placeholder.webp',
      description: '',
      detailedDescription: [],
      features: [],
      specifications: [],
      condition: '',
      category: 'family',
      status: 'available',
      featured: false,
      images: [],
    };
    setEditingCar(newCar);
    setIsAddingNew(true);
  };

  const handleSave = async () => {
    if (!editingCar) return;

    let updatedCars: CarType[];
    if (isAddingNew) {
      updatedCars = [...cars, editingCar];
    } else {
      updatedCars = cars.map(car => car.id === editingCar.id ? editingCar : car);
    }

    // Save to API
    const saved = await saveCarsToAPI(updatedCars);
    
    if (saved) {
      setCars(updatedCars);
      setEditingCar(null);
      setIsAddingNew(false);
      alert('‚úÖ Auto tallennettu onnistuneesti!\n\nMuutokset n√§kyv√§t heti sivustolla. P√§ivit√§ sivu n√§hd√§ksesi ne.');
    }
  };

  const handleDelete = async (id: string) => {
    if (!confirm('Haluatko varmasti poistaa t√§m√§n auton?')) return;

    const updatedCars = cars.filter(car => car.id !== id);
    const saved = await saveCarsToAPI(updatedCars);
    
    if (saved) {
      setCars(updatedCars);
      alert('‚úÖ Auto poistettu!');
    }
  };

  const exportCarsData = () => {
    const dataStr = JSON.stringify(cars, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'cars-export.json';
    link.click();
  };

  const exportTypeScript = () => {
    // Generate full TypeScript code
    const tsCode = `// Auto-generated by Admin Panel - ${new Date().toLocaleString('fi-FI')}
// Copy this entire content and replace the content in /app/data/cars.ts

export interface Car {
  id: string;
  slug: string;
  name: string;
  brand: string;
  model: string;
  price: string;
  priceEur: number;
  year: string;
  fuel: string;
  transmission: string;
  km: string;
  kmNumber: number;
  image: string;
  description: string;
  detailedDescription: string[];
  features: string[];
  specifications: {
    label: string;
    value: string;
  }[];
  condition: string;
  category: string;
  status: string;
  featured: boolean;
  images: {
    url: string;
    altText: string;
    order: number;
    isPrimary: boolean;
  }[];
}

export const cars: Car[] = ${JSON.stringify(cars, null, 2)};

export function getCarById(id: string): Car | undefined {
  return cars.find(car => car.id === id || car.slug === id);
}

export function getCarsByBrand(brand: string): Car[] {
  return cars.filter(car => car.brand.toLowerCase() === brand.toLowerCase());
}

export function getCarsByCategory(category: string): Car[] {
  return cars.filter(car => car.category === category);
}

export function getRelatedCars(currentCarId: string, limit: number = 3): Car[] {
  const currentCar = getCarById(currentCarId);
  if (!currentCar) return [];

  let related = getCarsByBrand(currentCar.brand).filter(car => car.id !== currentCarId);

  if (related.length < limit) {
    const categoryMatches = getCarsByCategory(currentCar.category)
      .filter(car => car.id !== currentCarId && !related.find(r => r.id === car.id));
    related = [...related, ...categoryMatches];
  }

  if (related.length < limit) {
    const others = cars
      .filter(car => car.id !== currentCarId && !related.find(r => r.id === car.id));
    related = [...related, ...others];
  }

  return related.slice(0, limit);
}`;

    // Copy to clipboard
    navigator.clipboard.writeText(tsCode).then(() => {
      alert('‚úÖ TypeScript-koodi kopioitu leikep√∂yd√§lle!\n\nSeuraavaksi:\n1. Avaa tiedosto: /app/data/cars.ts\n2. Valitse kaikki (Ctrl+A / Cmd+A)\n3. Liit√§ (Ctrl+V / Cmd+V)\n4. Tallenna tiedosto (Ctrl+S / Cmd+S)\n5. Sivusto p√§ivittyy automaattisesti!');
    }).catch(() => {
      // Fallback: download as file
      const blob = new Blob([tsCode], { type: 'text/typescript' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = 'cars.ts';
      link.click();
      alert('üì• Tiedosto ladattu! Korvaa /app/data/cars.ts t√§ll√§ tiedostolla.');
    });
  };

  const handleImageUpload = async (files: FileList) => {
    if (!editingCar || files.length === 0) return;

    setUploading(true);
    try {
      const formData = new FormData();
      Array.from(files).forEach(file => {
        formData.append('files', file);
      });

      const response = await fetch('/api/upload', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Upload failed');
      }

      const data = await response.json();
      
      // Add uploaded images to car
      const newImages = data.files.map((file: { url: string; name: string }, index: number) => ({
        url: file.url,
        altText: `${editingCar.name} - ${file.name}`,
        order: editingCar.images.length + index + 1,
        isPrimary: editingCar.images.length === 0 && index === 0
      }));

      setEditingCar({
        ...editingCar,
        images: [...editingCar.images, ...newImages],
        image: editingCar.image || newImages[0]?.url // Set main image if empty
      });

      alert(`‚úÖ ${data.files.length} kuva(a) ladattu onnistuneesti!`);
    } catch (error) {
      console.error('Upload error:', error);
      alert('‚ùå Kuvien lataus ep√§onnistui. Yrit√§ uudelleen.');
    } finally {
      setUploading(false);
    }
  };

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-md">
          <div className="flex items-center justify-center mb-6">
            <div className="p-4 bg-purple-600 rounded-full">
              <Lock className="w-8 h-8 text-white" />
            </div>
          </div>
          <h1 className="text-3xl font-bold text-center mb-2">Admin-paneeli</h1>
          <p className="text-gray-600 text-center mb-6">Kirjaudu sis√§√§n hallitaksesi autoja</p>
          
          <form onSubmit={handleLogin} className="space-y-4">
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Salasana
              </label>
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:ring-4 focus:ring-purple-100 transition-all"
                placeholder="Sy√∂t√§ salasana"
                required
              />
            </div>
            <button
              type="submit"
              className="w-full bg-purple-600 text-white font-bold py-3 rounded-xl hover:bg-purple-700 transition-all"
            >
              Kirjaudu sis√§√§n
            </button>
          </form>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="p-3 bg-purple-600 rounded-xl">
                <Car className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold">Autojen hallinta</h1>
                <p className="text-sm text-gray-600">{cars.length} autoa valikoimassa</p>
              </div>
            </div>
            <div className="flex gap-3">
              <button
                onClick={exportTypeScript}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-all text-sm font-semibold"
              >
                üìã Vie TypeScript
              </button>
              <button
                onClick={exportCarsData}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all text-sm font-semibold"
              >
                üíæ Vie JSON
              </button>
              <button
                onClick={handleLogout}
                className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-all text-sm font-semibold"
              >
                Kirjaudu ulos
              </button>
            </div>
          </div>
        </div>

        {/* Instructions Box */}
        <div className="bg-blue-50 border-2 border-blue-200 rounded-xl p-4 mb-6">
          <h3 className="font-bold text-blue-900 mb-2 flex items-center gap-2">
            üí° Miten muutokset n√§kyv√§t sivustolla?
          </h3>
          <ol className="text-sm text-blue-800 space-y-1 ml-4 list-decimal">
            <li>Lis√§√§/muokkaa autoja t√§ss√§ admin-paneelissa</li>
            <li>Klikkaa <strong>"üìã Vie TypeScript"</strong> ylh√§√§lt√§</li>
            <li>Koodi kopioituu automaattisesti leikep√∂yd√§lle</li>
            <li>Avaa tiedosto: <code className="bg-blue-100 px-2 py-0.5 rounded">/app/data/cars.ts</code></li>
            <li>Valitse kaikki (Ctrl+A) ‚Üí Liit√§ (Ctrl+V) ‚Üí Tallenna (Ctrl+S)</li>
            <li>‚úÖ Sivusto p√§ivittyy automaattisesti!</li>
          </ol>
        </div>

        {/* Add New Button */}
        <button
          onClick={handleAddNew}
          className="w-full md:w-auto mb-6 px-6 py-3 bg-green-600 text-white rounded-xl hover:bg-green-700 transition-all flex items-center justify-center gap-2 font-semibold"
        >
          <Plus className="w-5 h-5" />
          Lis√§√§ uusi auto
        </button>

        {/* Cars Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {cars.map((car) => (
            <div key={car.id} className="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-all">
              <div className="relative h-48 bg-gray-200">
                {car.image && (
                  <img
                    src={car.image}
                    alt={car.name}
                    className="w-full h-full object-cover"
                  />
                )}
                {car.featured && (
                  <div className="absolute top-3 right-3 bg-yellow-500 text-white text-xs font-bold px-3 py-1 rounded-full">
                    ‚≠ê Suosittu
                  </div>
                )}
              </div>
              <div className="p-4">
                <h3 className="font-bold text-lg mb-1">{car.name}</h3>
                <p className="text-purple-600 font-bold text-xl mb-2">{car.price}</p>
                <p className="text-sm text-gray-600 mb-3">
                  {car.year} ‚Ä¢ {car.km} ‚Ä¢ {car.fuel}
                </p>
                <div className="flex gap-2">
                  <button
                    onClick={() => {
                      setEditingCar(car);
                      setIsAddingNew(false);
                    }}
                    className="flex-1 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all flex items-center justify-center gap-2 text-sm font-semibold"
                  >
                    <Edit className="w-4 h-4" />
                    Muokkaa
                  </button>
                  <button
                    onClick={() => handleDelete(car.id)}
                    className="px-3 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-all"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Edit Modal */}
        {editingCar && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50 overflow-y-auto">
            <div className="bg-white rounded-2xl shadow-2xl w-full max-w-2xl my-8">
              <div className="p-6 border-b border-gray-200 flex items-center justify-between">
                <h2 className="text-2xl font-bold">
                  {isAddingNew ? 'Lis√§√§ uusi auto' : 'Muokkaa autoa'}
                </h2>
                <button
                  onClick={() => {
                    setEditingCar(null);
                    setIsAddingNew(false);
                  }}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-all"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
              
              <div className="p-6 space-y-4 max-h-[70vh] overflow-y-auto">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Nimi</label>
                    <input
                      type="text"
                      value={editingCar.name}
                      onChange={(e) => setEditingCar({ ...editingCar, name: e.target.value })}
                      className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-purple-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Merkki</label>
                    <input
                      type="text"
                      value={editingCar.brand}
                      onChange={(e) => setEditingCar({ ...editingCar, brand: e.target.value })}
                      className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-purple-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Malli</label>
                    <input
                      type="text"
                      value={editingCar.model}
                      onChange={(e) => setEditingCar({ ...editingCar, model: e.target.value })}
                      className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-purple-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Hinta (‚Ç¨)</label>
                    <input
                      type="number"
                      value={editingCar.priceEur}
                      onChange={(e) => {
                        const price = parseInt(e.target.value) || 0;
                        setEditingCar({ 
                          ...editingCar, 
                          priceEur: price,
                          price: `‚Ç¨${price.toLocaleString('fi-FI')}`
                        });
                      }}
                      className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-purple-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Vuosimalli</label>
                    <input
                      type="text"
                      value={editingCar.year}
                      onChange={(e) => setEditingCar({ ...editingCar, year: e.target.value })}
                      className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-purple-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Kilometrit</label>
                    <input
                      type="number"
                      value={editingCar.kmNumber}
                      onChange={(e) => {
                        const km = parseInt(e.target.value) || 0;
                        setEditingCar({ 
                          ...editingCar, 
                          kmNumber: km,
                          km: `${km.toLocaleString('fi-FI')} km`
                        });
                      }}
                      className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-purple-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Polttoaine</label>
                    <select
                      value={editingCar.fuel}
                      onChange={(e) => setEditingCar({ ...editingCar, fuel: e.target.value })}
                      className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-purple-500"
                    >
                      <option>Diesel</option>
                      <option>Bensiini</option>
                      <option>Hybridi</option>
                      <option>S√§hk√∂</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Vaihteisto</label>
                    <select
                      value={editingCar.transmission}
                      onChange={(e) => setEditingCar({ ...editingCar, transmission: e.target.value })}
                      className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-purple-500"
                    >
                      <option>Automatic</option>
                      <option>Manual</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Kategoria</label>
                    <select
                      value={editingCar.category}
                      onChange={(e) => setEditingCar({ ...editingCar, category: e.target.value })}
                      className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-purple-500"
                    >
                      <option value="family">Perhe</option>
                      <option value="premium">Premium</option>
                      <option value="suv">SUV</option>
                      <option value="sedan">Sedan</option>
                      <option value="compact">Kompakti</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Status</label>
                    <select
                      value={editingCar.status}
                      onChange={(e) => setEditingCar({ ...editingCar, status: e.target.value })}
                      className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-purple-500"
                    >
                      <option value="available">Saatavilla</option>
                      <option value="sold">Myyty</option>
                      <option value="reserved">Varattu</option>
                    </select>
                  </div>
                </div>
                
                <div>
                  <label className="flex items-center gap-2 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={editingCar.featured}
                      onChange={(e) => setEditingCar({ ...editingCar, featured: e.target.checked })}
                      className="w-5 h-5 text-purple-600"
                    />
                    <span className="text-sm font-semibold text-gray-700">Suositeltu auto</span>
                  </label>
                </div>

                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Kuvaus</label>
                  <textarea
                    value={editingCar.description}
                    onChange={(e) => setEditingCar({ ...editingCar, description: e.target.value })}
                    rows={3}
                    className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-purple-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">
                    P√§√§kuva
                  </label>
                  <div className="space-y-2">
                    <div className="flex gap-2">
                      <input
                        type="text"
                        value={editingCar.image}
                        onChange={(e) => setEditingCar({ ...editingCar, image: e.target.value })}
                        className="flex-1 px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-purple-500"
                        placeholder="/cars/image.webp"
                      />
                      {editingCar.image && (
                        <img
                          src={editingCar.image}
                          alt="Preview"
                          className="w-16 h-16 object-cover rounded-lg border-2 border-gray-200"
                        />
                      )}
                    </div>
                    
                    {/* Upload button for main image */}
                    <div>
                      <input
                        type="file"
                        id="mainImageUpload"
                        accept="image/*"
                        className="hidden"
                        onChange={async (e) => {
                          const file = e.target.files?.[0];
                          if (!file) return;

                          const formData = new FormData();
                          formData.append('files', file);

                          setUploading(true);
                          try {
                            const response = await fetch('/api/upload', {
                              method: 'POST',
                              body: formData,
                            });

                            const data = await response.json();
                            if (data.success && data.files.length > 0) {
                              setEditingCar({ ...editingCar, image: data.files[0].url });
                            }
                          } catch (error) {
                            console.error('Upload error:', error);
                            alert('Kuvan lataus ep√§onnistui');
                          } finally {
                            setUploading(false);
                          }
                        }}
                      />
                      <label
                        htmlFor="mainImageUpload"
                        className="inline-flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 cursor-pointer transition-colors"
                      >
                        <Upload className="w-4 h-4" />
                        {uploading ? 'Ladataan...' : 'Lataa p√§√§kuva'}
                      </label>
                    </div>
                  </div>
                </div>

                {/* Multiple Images Upload with Drag & Drop */}
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">
                    üì∏ Kuvagalleria ({editingCar.images.length} kuvaa)
                  </label>
                  
                  {/* Display existing images */}
                  {editingCar.images.length > 0 && (
                    <div className="grid grid-cols-4 gap-2 mb-3">
                      {editingCar.images.map((img, index) => (
                        <div key={index} className="relative group">
                          <img
                            src={img.url}
                            alt={img.altText}
                            className="w-full h-20 object-cover rounded-lg border-2 border-gray-200"
                          />
                          <button
                            type="button"
                            onClick={() => {
                              const newImages = editingCar.images.filter((_, i) => i !== index);
                              setEditingCar({ ...editingCar, images: newImages });
                            }}
                            className="absolute top-1 right-1 bg-red-600 text-white p-1 rounded opacity-0 group-hover:opacity-100 transition-opacity"
                          >
                            <X className="w-3 h-3" />
                          </button>
                          {img.isPrimary && (
                            <div className="absolute bottom-1 left-1 bg-green-600 text-white text-xs px-2 py-0.5 rounded">
                              P√§√§
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Upload Button - Beautiful & Easy */}
                  <div className="relative border-2 border-dashed border-purple-300 rounded-xl p-6 hover:border-purple-500 hover:bg-purple-50 transition-all">
                    <input
                      type="file"
                      accept="image/*"
                      multiple
                      onChange={(e) => {
                        if (e.target.files) {
                          handleImageUpload(e.target.files);
                        }
                      }}
                      className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                      disabled={uploading}
                    />
                    <div className="text-center">
                      {uploading ? (
                        <>
                          <div className="animate-spin mx-auto mb-2">
                            <Upload className="w-8 h-8 text-purple-600" />
                          </div>
                          <p className="text-sm font-semibold text-purple-600">Ladataan kuvia...</p>
                        </>
                      ) : (
                        <>
                          <ImageIcon className="w-12 h-12 text-purple-600 mx-auto mb-2" />
                          <p className="text-sm font-semibold text-gray-700 mb-1">
                            Klikkaa tai ved√§ kuvia t√§h√§n
                          </p>
                          <p className="text-xs text-gray-500">
                            üì± Toimii mobiilissa ja tietokoneella ‚Ä¢ Valitse useita kerralla
                          </p>
                          <p className="text-xs text-purple-600 mt-2">
                            ‚ú® Kuvat tallentuvat automaattisesti /public/cars/ kansioon
                          </p>
                        </>
                      )}
                    </div>
                  </div>
                  
                  <p className="text-xs text-gray-500 mt-2">
                    ÔøΩ Suositus: JPEG/WEBP, max 5 MB per kuva, 3-8 kuvaa per auto
                  </p>
                </div>
              </div>

              <div className="p-6 border-t border-gray-200 flex gap-3">
                <button
                  onClick={handleSave}
                  className="flex-1 px-6 py-3 bg-green-600 text-white rounded-xl hover:bg-green-700 transition-all flex items-center justify-center gap-2 font-bold"
                >
                  <Save className="w-5 h-5" />
                  Tallenna
                </button>
                <button
                  onClick={() => {
                    setEditingCar(null);
                    setIsAddingNew(false);
                  }}
                  className="px-6 py-3 bg-gray-600 text-white rounded-xl hover:bg-gray-700 transition-all font-bold"
                >
                  Peruuta
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
